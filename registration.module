<?php

/**
 * @file
 * Module file for registration module.
 */

/**
 * Constants - ultimately this would be parameterized.
 */
define("REGISTRATION_COURSE_TITLE", "Theory of Computing 2: Electric Boogaloo");

/**
 * DATABASE FUNCTIONS.
 */

/**
 * Save an entry in the database.
 *
 * The underlying function is db_insert().
 *
 * Exception handling is shown in this example. It could be simplified
 * without the try/catch blocks, but since an insert will throw an exception
 * and terminate your application if the exception is not handled, it is best
 * to employ try/catch.
 *
 * @param array $entry
 *   An array containing all the fields of the database record.
 *
 * @see db_insert()
 */
function registration_entry_insert(array $entry) {
  $return_value = NULL;
  try {
    $return_value = db_insert('registration')
      ->fields($entry)
      ->execute();
  }
  catch (Exception $e) {
    drupal_set_message(t('db_insert failed. Message = %message, query= %query',
      array('%message' => $e->getMessage(), '%query' => $e->query_string)),
      'error');
  }
  return $return_value;
}

/**
 * Update an entry in the database.
 *
 * @param array $entry
 *   An array containing all the fields of the item to be updated.
 *
 * @see db_update()
 */
function registration_entry_update(array $entry) {
  try {
    // db_update()...->execute() returns the number of rows updated.
    $count = db_update('registration')
      ->fields($entry)
      ->condition('pid', $entry['pid'])
      ->execute();
  }
  catch (Exception $e) {
    drupal_set_message(t('db_update failed. Message = %message, query= %query',
      array('%message' => $e->getMessage(), '%query' => $e->query_string)),
      'error');
  }
  return $count;
}

/**
 * Delete an entry from the database.
 *
 * @param array $entry
 *   An array containing at least the person identifier 'pid' element of the
 *   entry to delete.
 *
 * @see db_delete()
 */
function registration_entry_delete(array $entry) {
  db_delete('registration')
    ->condition('pid', $entry['pid'])
    ->execute();
}

/**
 * Select only certain fields from the database.
 *
 * As with any database query we should only bring in the data we need.
 * This gives us the field method that expects the table name followed by an
 * array of the fields we want, in this case the table 'registration' and
 * the fields name and surname.
 */
function registration_selective_list(array $fields = array()) {
  // Bring in selected fields from db.
  $select = db_select('registration')
    ->fields('registration', $fields)
    ->execute();
  $rows = array();
  foreach ($select as $entry) {
    // Sanitize the data before handing it off to the theme layer.
    $rows[] = array_map('check_plain', (array) $entry);
  }
  return $rows;
}

/**
 * HELP FUNCTIONS.
 */

/**
 * Implements hook_help().
 *
 * Show some help on each form provided by this module.
 */
function registration_help($path) {
  $output = '';
  switch ($path) {
    case 'registration':
      $output = t('Fill in and submit the form to sign up for the course.');
      break;
  }
  return $output;
}

/**
 * MENU/FORM FUNCTIONS.
 */

/**
 * Implements hook_menu().
 *
 * Set up calls to drupal_get_form() for all our example cases.
 */
function registration_menu() {
  $items = array();

  $items['registration'] = array(
    'title' => 'Course Registration Page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_form_add'),
    'access arguments' => array('register for course'),
  );

  return $items;
}

/**
 * Prepare a simple form to add an entry, with all the interesting fields.
 */
function registration_form_add($form, &$form_state) {
  $form = array();
  $title = "Register for '" . REGISTRATION_COURSE_TITLE . "'";

  $form['add'] = array(
    '#type'  => 'fieldset',
    '#title' => $title,
  );
  $form['add']['name'] = array(
    '#type'  => 'textfield',
    '#title' => t('Name'),
    '#size'  => 15,
    '#required' => TRUE,
  );
  $form['add']['surname'] = array(
    '#type'  => 'textfield',
    '#title' => t('Surname'),
    '#size'  => 15,
    '#required' => TRUE,
  );
  $form['add']['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Register'),
  );

  return $form;
}

/**
 * Submit handler for 'add entry' form.
 */
function registration_form_add_submit($form, &$form_state) {
  // Save the submitted entry.
  $entry = array(
    'name'    => $form_state['values']['name'],
    'surname' => $form_state['values']['surname'],
  );
  $return = registration_entry_insert($entry);
  if ($return) {
    drupal_set_message(t("Successfully registered!"));
  }
}

/**
 * REGISTRATION MODULE - BLOCKS.
 */

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function registration_block_info() {
  $blocks['registration_block'] = array(
    'info' => t('Registration Block'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook declares how the configured options for a block
 * provided by this module are saved.
 */
function registration_block_view($delta = '') {
  switch ($delta) {
    case 'registration_block':
      // The subject is displayed at the top of the block.
      $block['subject'] = t('Number of Students Registered:');
      $block['content'] = registration_contents($delta);
      break;
  }
  return $block;
}

/**
 * A block content function - displays the number of students registered.
 */
function registration_contents($which_block) {
  switch ($which_block) {
    case 'registration_block':
      $query = db_select('registration');
      $num_rows = $query->countQuery()->execute()->fetchField();
      $result = array(
        '#markup' => $num_rows,
      );
      return $result;
  }
}

/**
 * Implements hook_permission().
 *
 * In this case we're adding an additional permission for 'authenticated users'
 * to access the registration page.
 */
function registration_permission() {
  return array(
    'register for course' => array(
      'title' => t('Register For Course'),
      'description' => t('Sign myself up for a course.'),
    ),
  );
}
